I am making a web app using Django , now you have to check where is the main problem cause of in the show section no data(task) is not showing: here is folder tree

E:.
│   db.sqlite3
│   manage.py
│
├───Add_task
│   │   admin.py
│   │   apps.py
│   │   forms.py
│   │   models.py
│   │   tests.py
│   │   urls.py
│   │   views.py
│   │   __init__.py
│   │
│   ├───migrations
│   │   │   0001_initial.py
│   │   │   __init__.py
│   │   │
│   │   └───__pycache__
│   │           0001_initial.cpython-313.pyc
│   │           __init__.cpython-313.pyc
│   │
│   ├───templates
│   │       add_task.html
│   │
│   └───__pycache__
│           admin.cpython-313.pyc
│           apps.cpython-313.pyc
│           forms.cpython-313.pyc
│           models.cpython-313.pyc
│           urls.cpython-313.pyc
│           views.cpython-313.pyc
│           __init__.cpython-313.pyc
│
├───Category
│   │   admin.py
│   │   apps.py
│   │   forms.py
│   │   models.py
│   │   tests.py
│   │   urls.py
│   │   views.py
│   │   __init__.py
│   │
│   ├───migrations
│   │   │   0001_initial.py
│   │   │   __init__.py
│   │   │
│   │   └───__pycache__
│   │           0001_initial.cpython-313.pyc
│   │           __init__.cpython-313.pyc
│   │
│   ├───templates
│   │       add_category.html
│   │
│   └───__pycache__
│           admin.cpython-313.pyc
│           apps.cpython-313.pyc
│           forms.cpython-313.pyc
│           models.cpython-313.pyc
│           urls.cpython-313.pyc
│           views.cpython-313.pyc
│           __init__.cpython-313.pyc
│
├───Show_task
│   │   admin.py
│   │   apps.py
│   │   forms.py
│   │   models.py
│   │   tests.py
│   │   urls.py
│   │   views.py
│   │   __init__.py
│   │
│   ├───migrations
│   │   │   0001_initial.py
│   │   │   __init__.py
│   │   │
│   │   └───__pycache__
│   │           0001_initial.cpython-313.pyc
│   │           __init__.cpython-313.pyc
│   │
│   ├───templates
│   │       delete_confirm.html
│   │       show_task.html
│   │       task_details.html
│   │
│   └───__pycache__
│           admin.cpython-313.pyc
│           apps.cpython-313.pyc
│           forms.cpython-313.pyc
│           models.cpython-313.pyc
│           urls.cpython-313.pyc
│           views.cpython-313.pyc
│           __init__.cpython-313.pyc
│
├───Task_manager
│   │   asgi.py
│   │   settings.py
│   │   urls.py
│   │   views.py
│   │   wsgi.py
│   │   __init__.py
│   │
│   └───__pycache__
│           settings.cpython-313.pyc
│           urls.cpython-313.pyc
│           views.cpython-313.pyc
│           wsgi.cpython-313.pyc
│           __init__.cpython-313.pyc
│
└───templates
        base.html
        home.html


here is add_task section codes: 

models.py
python
from django.db import models
from Category.models import Category

class Task(models.Model):
    title = models.CharField(max_length=100)
    details = models.TextField(blank=True)  
    due_date = models.DateField()
    due_time = models.TimeField()
    
    category = models.ManyToManyField(Category)

    def __str__(self):
        return self.title
forms.py
python
from django import forms
from .models import Task

class TaskForm(forms.ModelForm):
    class Meta:
        model = Task
        fields = '__all__'
        widgets = {
            'due_date': forms.DateInput(attrs={'type': 'date'}),
            'due_time': forms.TimeInput(attrs={'type': 'time'}),
            'details': forms.Textarea(attrs={'rows': 4}),
        }

    def __init__(self, *args, **kwargs):
        super(TaskForm, self).__init__(*args, **kwargs)
        self.fields['details'].required = False
views.py
python
from django.shortcuts import render, redirect
from .forms import TaskForm
from . import models

def add_task(request):
    if request.method == 'POST':
        task_form = TaskForm(request.POST)
        if task_form.is_valid():
            task_form.save()
            return redirect('homepage')
    else:
        task_form = TaskForm()
    
    return render(request, 'add_task.html', {'form': task_form})
urls.py
python
from django.urls import path
from . import views

urlpatterns = [
    path('', views.add_task, name='add_task'),
]
add_task.html
html
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<div class="container mt-4">
    <h1>Add Task</h1>
    <form method="post">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
</div>
{% endblock %}

now with category section's code: 

models.py
python
from django.db import models

class Category(models.Model):
    name = models.CharField(max_length=100)
    
    def __str__(self):
        return self.name
forms.py
python
from django import forms
from .models import Category

class CategoryForm(forms.ModelForm):
    class Meta:
        model = Category
        fields = '__all__'
views.py
python
from django.shortcuts import render, redirect
from . import forms

def add_category(request):
    if request.method == 'POST':
        category_form = forms.CategoryForm(request.POST)
        if category_form.is_valid():
            category_form.save()
            return redirect('add_category')
    else:
        category_form = forms.CategoryForm()
    
    return render(request, 'add_category.html', {'form': category_form})
urls.py
python
from django.urls import path
from . import views

urlpatterns = [
    path('', views.add_category, name='add_category'),
]
add_category.html
html
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<div class="container mt-4">
    <h1>Add Category</h1>
    <form method="post">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
</div>
{% endblock %}

models.py
python
from django.db import models
from Category.models import Category

class show(models.Model):
    title = models.CharField(max_length=100)
    details = models.TextField(blank=True)
    due_date = models.DateField()
    due_time = models.TimeField()
    category = models.ManyToManyField(Category)
    is_completed = models.BooleanField(default=False)

    def __str__(self):
        return self.title
forms.py
python
from django import forms
from .models import show

class TaskForm(forms.ModelForm):
    class Meta:
        model = show
        fields = '__all__'
views.py
python
from django.shortcuts import render, get_object_or_404, redirect
from .models import show
from .forms import TaskForm

def show_tasks(request):
    tasks = show.objects.all()
    print(f"Found {len(tasks)} tasks")
    return render(request, 'show_task.html', {'tasks': tasks})

def edit_task(request, task_id):
    task = get_object_or_404(show, id=task_id)
    if request.method == 'POST':
        form = TaskForm(request.POST, instance=task)
        if form.is_valid():
            form.save()
            return redirect('show_tasks')
    else:
        form = TaskForm(instance=task)
    return render(request, 'edit_task.html', {'form': form})

def delete_task(request, task_id):
    task = get_object_or_404(show, id=task_id)
    if request.method == 'POST':
        task.delete()
        return redirect('show_tasks')
    return render(request, 'delete_confirm.html', {'task': task})

def complete_task(request, task_id):
    task = get_object_or_404(show, id=task_id)
    task.is_completed = True
    task.save()
    return redirect('show_tasks')
urls.py
python
from django.urls import path
from . import views

urlpatterns = [
    path('', views.show_tasks, name='show_tasks'),
    path('edit/<int:task_id>/', views.edit_task, name='edit_task'),
    path('delete/<int:task_id>/', views.delete_task, name='delete_task'),
    path('complete/<int:task_id>/', views.complete_task, name='complete_task'),
]
delete_confirm.html
html
{% extends 'base.html' %}
{% block content %}
<div class="container">
    <h2 class="text-center mb-4">All Tasks</h2>
    
    <div class="row">
        {% for task in tasks %}
        <div class="col-md-4 mb-4">
            <div class="card h-100 shadow-sm {% if task.is_completed %}border-success{% else %}border-primary{% endif %}">
                <div class="card-header {% if task.is_completed %}bg-success text-white{% else %}bg-primary text-white{% endif %}">
                    <h5 class="card-title mb-0">
                        {{ task.title }}
                        {% if task.is_completed %}
                        <span class="badge bg-light text-dark float-end">Completed</span>
                        {% endif %}
                    </h5>
                </div>
                <div class="card-body">
                    <p class="card-text">{{ task.details|linebreaksbr }}</p>
                    <hr>
                    <div class="mb-3">
                        <p class="mb-1"><strong><i class="bi bi-calendar-event"></i> Due Date:</strong> {{ task.due_date }}</p>
                        <p class="mb-1"><strong><i class="bi bi-clock"></i> Due Time:</strong> {{ task.due_time }}</p>
                        {% if task.category.all %}
                        <p class="mb-1"><strong><i class="bi bi-tags"></i> Categories:</strong> 
                            {% for cat in task.category.all %}
                            <span class="badge bg-secondary">{{ cat.name }}</span>
                            {% endfor %}
                        </p>
                        {% endif %}
                    </div>
                </div>
                <div class="card-footer bg-transparent">
                    {% if task.is_completed %}
                        <div class="d-grid gap-2">
                            <a href="{% url 'edit_task' task.id %}" class="btn btn-outline-primary btn-sm">View</a>
                        </div>
                    {% else %}
                        <div class="btn-group d-flex" role="group">
                            <a href="{% url 'edit_task' task.id %}" class="btn btn-primary btn-sm flex-fill">
                                <i class="bi bi-pencil"></i> Edit
                            </a>
                            <a href="{% url 'delete_task' task.id %}" class="btn btn-danger btn-sm flex-fill">
                                <i class="bi bi-trash"></i> Delete
                            </a>
                            <a href="{% url 'complete_task' task.id %}" class="btn btn-success btn-sm flex-fill">
                                <i class="bi bi-check-circle"></i> Complete
                            </a>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
        {% empty %}
        <div class="col-12">
            <div class="alert alert-info text-center">
                <i class="bi bi-info-circle-fill"></i> No tasks found. Would you like to add one?
            </div>
        </div>
        {% endfor %}
    </div>
</div>

<style>
    .card {
        transition: transform 0.2s ease-in-out;
    }
    .card:hover {
        transform: translateY(-5px);
    }
    .card-text {
        min-height: 60px;
    }
</style>
{% endblock %}
task_details.html
html
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<form method="post">
    <h1>Show Task</h1>
    {% csrf_token %}
    {{ form|crispy }}
    <button type="submit" class="btn btn-warning">Submit</button>
</form>
{% endblock %}



now main project file task manager code: 

settings.py
python
"""
Django settings for Task_manager project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-a^_^c)3&1*lo79e4j$ecpn5)00pehdk_7z)ufr#s)l@fywxj-_'
DEBUG = True
ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Add_task',
    'Category',
    'Show_task',
    'crispy_forms',
    'crispy_bootstrap5',
]

CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'
CRISPY_TEMPLATE_PACK = 'bootstrap5'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Task_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Task_manager.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
urls.py
python
from django.contrib import admin
from django.urls import path, include
from . import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('show-tasks/', include('Show_task.urls')),
    path('add-task/', include('Add_task.urls')),
    path('categories/', include('Category.urls')),
    path('', views.home, name='homepage'),
]
views.py
python
from django.shortcuts import render
from Show_task.models import show

def home(request):
    tasks = show.objects.all()
    return render(request, 'home.html', {'tasks': tasks})

